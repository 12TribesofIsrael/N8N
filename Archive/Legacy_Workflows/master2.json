{
  "name": "Master Scene-Based Video Generator",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [-200, 20],
      "id": "manual-trigger-master2",
      "name": "Start Workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "input-content-master2",
              "name": "formattedText",
              "value": "How I love the Most High with all my mind, body, and soul. With all my mind, I reflect on the teachings and wisdom of the Most High. In quiet moments of prayer, I seek guidance and understanding. My thoughts are consumed with His love and grace, and I meditate on His word day and night.\n\nWith all my body, I worship and serve the Most High. Through active movement, dance, and physical expressions of praise, I honor Him with my entire being. My body becomes a vessel for His glory, and every action I take is dedicated to serving His purpose.\n\nWith all my soul, I surrender completely to the Most High. My deepest emotions, my innermost being, and my very essence are devoted to Him. In moments of worship, my soul connects with the divine, and I experience a profound sense of peace and fulfillment.\n\nWhen my mind, body, and soul are aligned, I experience a deep and holistic devotion to the Most High. This integration brings balance and harmony to my life. Together with my community, we love the Most High with all our minds, bodies, and souls. Our shared love strengthens our faith and bonds us together.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [100, 20],
      "id": "input-text-master2",
      "name": "Input Text Content"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.perplexity.ai/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"llama-3.1-sonar-large-128k-online\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Create 5 video scenes from this text: {{ $('Input Text Content').item.json.formattedText }}. Return JSON with this exact format: {\\\"scenes\\\": [{\\\"title\\\": \\\"scene title\\\", \\\"voiceoverText\\\": \\\"narration text\\\", \\\"imagePrompt\\\": \\\"visual description\\\"}]}\"\n    }\n  ],\n  \"max_tokens\": 2000,\n  \"temperature\": 0.7\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [400, 20],
      "id": "perplexity-master2",
      "name": "Perplexity Scene Generator",
      "credentials": {
        "httpHeaderAuth": {
          "id": "PZ1kkz2SyVP9vn5c",
          "name": "Perplexity"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse Perplexity response and format for the WORKING template\nconst response = items[0].json.choices[0].message.content;\n\n// Extract JSON from response\nlet sceneData;\ntry {\n  const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n  sceneData = jsonMatch ? JSON.parse(jsonMatch[0]) : JSON.parse(response);\n} catch (error) {\n  throw new Error('Failed to parse Perplexity response: ' + error.message);\n}\n\n// Get scenes array\nlet scenes = sceneData.scenes || [];\n\nif (scenes.length === 0) {\n  throw new Error('No scenes found in response. Raw response: ' + response);\n}\n\n// Function to clean text for JSON safety\nfunction cleanText(text) {\n  if (!text) return '';\n  return text\n    .replace(/\"/g, \"'\")  // Replace double quotes with single quotes\n    .replace(/\\n/g, \" \")  // Replace newlines with spaces\n    .replace(/\\r/g, \" \")  // Replace carriage returns\n    .replace(/\\t/g, \" \")  // Replace tabs\n    .replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, \"\")  // Remove control characters\n    .trim();\n}\n\n// Transform scenes to match WORKING TEMPLATE structure (lSsRWJXY8EgpdEGyqC3f)\n// This template expects scenes[] with imagePrompt, voiceOverText, overlaidText\nconst workingScenes = scenes.map((scene, index) => ({\n  imagePrompt: cleanText(scene.imagePrompt || scene.imageDescription || `A meaningful spiritual visual for scene ${index + 1}`),\n  voiceOverText: cleanText(scene.voiceoverText || scene.voiceOverText || scene.description || `Scene ${index + 1} spiritual content`),\n  overlaidText: cleanText(scene.title || `Spiritual Scene ${index + 1}`) // This shows as overlay text\n}));\n\nreturn {\n  totalScenes: scenes.length,\n  // Formatted for WORKING template (lSsRWJXY8EgpdEGyqC3f)\n  scenes: workingScenes,\n  voice: \"Harry\", // Voice from working Make.com template\n  // Debug info\n  originalScenes: scenes,\n  videoTitle: \"Loving the Most High - Complete Devotion\"\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 20],
      "id": "format-scenes-master2",
      "name": "Format for Working Template"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.json2video.com/v2/movies",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"template\": \"lSsRWJXY8EgpdEGyqC3f\",\n  \"resolution\": \"full-hd\",\n  \"variables\": {\n    \"scenes\": {{ $('Format for Working Template').item.json.scenes }},\n    \"voice\": \"{{ $('Format for Working Template').item.json.voice }}\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 20],
      "id": "generate-video-master2",
      "name": "Generate Scene-Based Video",
      "credentials": {
        "httpHeaderAuth": {
          "id": "pKpJaJTXBg3wLGgY",
          "name": "Json2Video"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.json2video.com/v2/movies",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "project",
              "value": "={{ $('Generate Scene-Based Video').item.json.project }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1300, 20],
      "id": "check-status-master2",
      "name": "Check Video Status",
      "credentials": {
        "httpHeaderAuth": {
          "id": "pKpJaJTXBg3wLGgY",
          "name": "Json2Video"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "video-complete",
                    "leftValue": "={{ $json.movie.status }}",
                    "rightValue": "done",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Video Complete"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.movie.status }}",
                    "rightValue": "error",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "video-error"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Video Error"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "video-processing",
                    "leftValue": "={{ $json.movie.status }}",
                    "rightValue": "running",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Still Processing"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1600, 20],
      "id": "status-router-master2",
      "name": "Video Status Router"
    },
    {
      "parameters": {
        "amount": 15
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [1600, 280],
      "id": "wait-master2",
      "name": "Wait 15 Seconds"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "final-url",
              "name": "videoUrl",
              "value": "={{ $json.movie.url }}",
              "type": "string"
            },
            {
              "id": "final-project",
              "name": "projectId",
              "value": "={{ $json.project }}",
              "type": "string"
            },
            {
              "id": "final-status",
              "name": "status",
              "value": "completed",
              "type": "string"
            },
            {
              "id": "scene-count",
              "name": "totalScenes",
              "value": "={{ $('Format for Working Template').item.json.totalScenes }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1900, 20],
      "id": "final-output-master2",
      "name": "Final Video Output"
    }
  ],
  "pinData": {},
  "connections": {
    "Start Workflow": {
      "main": [
        [
          {
            "node": "Input Text Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Text Content": {
      "main": [
        [
          {
            "node": "Perplexity Scene Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Perplexity Scene Generator": {
      "main": [
        [
          {
            "node": "Format for Working Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format for Working Template": {
      "main": [
        [
          {
            "node": "Generate Scene-Based Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Scene-Based Video": {
      "main": [
        [
          {
            "node": "Check Video Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Video Status": {
      "main": [
        [
          {
            "node": "Video Status Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video Status Router": {
      "main": [
        [
          {
            "node": "Final Video Output",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [
          {
            "node": "Wait 15 Seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 15 Seconds": {
      "main": [
        [
          {
            "node": "Check Video Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "12345678-1234-1234-1234-123456789abc",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "unique-instance-id-master2"
  },
  "id": "master2-scene-video-generator",
  "tags": []
} 